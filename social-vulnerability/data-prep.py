import ibis
from ibis import _
from pathlib import Path
import os
import sys
sys.path.insert(0, ".")
from utilities import generate_pmtiles

import subprocess
import os

def generate_pmtiles(input_file, output_file, max_zoom=12):
    # Ensure Tippecanoe is installed
    if subprocess.call(["which", "tippecanoe"], stdout=subprocess.DEVNULL) != 0:
        raise RuntimeError("Tippecanoe is not installed or not in PATH")

    # Construct the Tippecanoe command
    ## Do not use "--drop-densest-as-needed", or "--extend-zooms-if-still-dropping" in this context!
    command = [
        "tippecanoe",
        "-o", output_file,
        "-z", str(max_zoom),
        "--force",
        input_file
    ]

    # Run Tippecanoe
    try:
        subprocess.run(command, check=True)
        print(f"Successfully generated PMTiles file: {output_file}")
    except subprocess.CalledProcessError as e:
        print(f"Error running Tippecanoe: {e}")

con = ibis.duckdb.connect(extensions=['httpfs', 'spatial'])

def create_cloud_formats(year, type = "counties", use_dir = False):

    yeardir = "" # sometimes an extra folder is used, not consistent within or between years
    if type == "counties":
        gdb_file = f"SVI{year}_US_county.gdb"
        if year in ["2000"]:
            gdb_file = f"SVI_{year}_US_COUNTY.gdb"
        access_url = f"https://svi.cdc.gov/Documents/Data/{year}/db/states_counties/SVI_{year}_US_county.zip{yeardir}"
    else:
        if year in ["2010", "2020"]:
            yeardir = f"/SVI_{year}_US"
        access_url = f"https://svi.cdc.gov/Documents/Data/{year}/db/states/SVI_{year}_US.zip{yeardir}"
        gdb_file = f"SVI{year}_US_tract.gdb"


    url = "/vsizip//vsicurl/" + access_url + f"/{gdb_file}"
    expr = con.read_geo(url)

    ## What about projection??
    ## Check make_valid?

    parquet_file = f"{Path(gdb_file).stem}.parquet"
    pmtiles_file = f"{Path(gdb_file).stem}.pmtiles"
    expr.to_parquet(f"svi-data/{year}/{parquet_file}")

    # tippecanoe requires geojson input to create PMTiles.  Drop most additional variables in PMTiles creation.
    query = ibis.to_sql(
        expr
    #    .rename(ST_ABBR="ST", COUNTY="LOCATION")  # col names differ in years, manually correct as needed
        .select('ST_ABBR', 'COUNTY', 'FIPS', 'RPL_THEMES', 'Shape')
    )
    con.raw_sql(f"COPY ({query}) TO '/tmp/svi.json' WITH (FORMAT GDAL, DRIVER 'GeoJSON', LAYER_CREATION_OPTIONS 'WRITE_BBOX=YES');")

    generate_pmtiles("/tmp/svi.json", f"svi-data/{year}/{pmtiles_file}")
    os.remove("/tmp/svi.json")
    return [gdb_file, parquet_file, pmtiles_file]

for year in ["2022"]:
    create_cloud_formats(year, type = "counties")

for year in ["2022"]:
    create_cloud_formats(year, type = "tract")

# DONE
# county: 2022, 2020, 2010, 2000
# tract:  2022, 2020, 2010, 2000



# ick, download-first is much more verbose code than vsi refs
# import requests
# open("file.zip", "wb").write(requests.get(counties_url).content)
# import zipfile
# with zipfile.ZipFile('file.zip', 'r') as zip_ref:
#     zip_ref.extractall()

